#pragma checksum "C:\Users\Antonio\Documents\Projetos Visual Studio\ProjetoElevador_Documentacao\ProjetoElevador_Documentacao\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "394fae5ff11143c4a9969a0053d1483a7e7c2428"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(ProjetoElevador_Documentacao.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace ProjetoElevador_Documentacao.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Antonio\Documents\Projetos Visual Studio\ProjetoElevador_Documentacao\ProjetoElevador_Documentacao\Pages\_ViewImports.cshtml"
using ProjetoElevador_Documentacao;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"394fae5ff11143c4a9969a0053d1483a7e7c2428", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a585ffd0c9fa06c332a76792c08fde053b9e4cd3", @"/Pages/_ViewImports.cshtml")]
    #nullable restore
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\Antonio\Documents\Projetos Visual Studio\ProjetoElevador_Documentacao\ProjetoElevador_Documentacao\Pages\Index.cshtml"
  
    ViewData["Title"] = "Trabalho Final do curso MS Dev";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4""><i>""Construção de um aplicativo de elevador""</i> - Antonio Cirilo</h1>

    O objetivo do trabalho era construir um elevador simples que tivesse as funções de <b>'subir'</b>, <b>'descer'</b>,
    <b>'adicionar uma pessoa'</b> e <b>'retirar uma pessoa'</b>. Tudo isso sendo apresentado no próprio console do <i>Visual Studio</i>.
    Para isso, primeiro foi necessário criar uma classe chamada <i>'Elevador'</i> na pasta Models, e dentro dessa classe foram inseridos 
    os atributos públicos do elevador (Capacidade máxima de passageiros, Quantidade inicial de passageiros, Total de andares do prédio e Andar inicial).
    <br />
    <img src = ""img\ProjetoElevadorprint1.png"">
    <br />
    Depois, foram criados os métodos pedidos pelo professor, que seriam as ações que o Elevador faria ao serem cumpridos determinados requisitos: Inicializar, Entrar, Sair, Subir e Descer.
    Foram então atribuídas as ações para cada um desses métodos, para que quando");
            WriteLiteral(@" cada um deles fosse 'chamado' no Program.cs, tivesse a sua função definida.
    <br />
    <img src = ""img\ProjetoElevadorprint2.png"">
    <br />
    Assim sendo, por exemplo, quando a função 'Entrar' fosse acionada pelo usuário no console, o programa já saberia que deve adicionar pessoas++.
    Com todas as funções programadas, agora só restava setar a janela <i>'Program.cs'</i>, onde de fato o programa iria rodar.
    A primeira coisa a fazer nessa parte foi inserir a biblioteca do <i>'Elevador.cs'</i> pra funcionar no <i>'Program.cs'</i>, criando um objeto com o nome de ""Elevador Divertido"" (nome aleatório escolhido para o elevador). 
    <br />
    <img src = ""img\ProjetoElevadorprint3.jpg"">
    <br />
    Com isso feito, foi inicializado o elevador assim que o programa abrisse, e junto com a função 'inicializar', os atributos dizendo que a capacidade máxima de pessoas nesse
    elevador é igual a <b>5</b> e o total de andares do prédio é igual a <b>7</b>, logo, não seria possível ultrapassar ");
            WriteLiteral(@"esses parâmetros, segundo o que tinha sido definido nos métodos, na etapa 
    anterior. Feito isso, foi criado um 'switch case' para não precisar usar diversas linhas de 'if' e 'else if' com as opções do que cada input do usuário faria ao elevador. 
    <br />
    <img src = ""img\ProjetoElevadorprint4.png"">
    <br />
    Também foi inserido um dado booleano que muda o <i>Continuar</i> para <i>false</i> e encerra o Elevador quando o usuário pressiona '5 - Sair', como ensinado em aula. O resultado é o que pode ser visto no programa final disponibilizado 
    junto a esse arquivo no GitHub. 
    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; } = default!;
        #nullable disable
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
